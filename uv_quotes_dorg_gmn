import os
import yaml
from collections import OrderedDict

# Directory where your projects are located
projects_directory = "/path/to/projects"

# Content to add inside existing blocks
content_to_add = """
include:
  - project: zzz
    file: zzz

variables:
  nexus_iq_scan_path: .
  nexus_scan_stage: release

stages:
  - nexusiq-scan
"""

# Parse the content to add once, outside the loop
content_to_add_parsed = yaml.safe_load(content_to_add)

# Custom YAML dumper for handling indentation (same as before)
class CustomDumper(yaml.Dumper):
    def increase_indent(self, flow=False, indentless=False):
        return super(CustomDumper, self).increase_indent(flow, False)

# Iterate through each project directory
for project_dir in os.listdir(projects_directory):
    project_path = os.path.join(projects_directory, project_dir)
    gitlab_ci_file = os.path.join(project_path, ".gitlab-ci.yml")

    try:
        # Check if .gitlab-ci.yml exists in the project directory
        if os.path.isfile(gitlab_ci_file):
            with open(gitlab_ci_file, 'r') as file:
                original_content = file.read()

            # Parse the existing YAML content
            existing_content = yaml.safe_load(original_content) or {}

            # Check if the "include" block exists
            if "include" in existing_content:
                # If it's a list, append the new content (assuming single entry)
                if isinstance(existing_content["include"], list):
                    existing_content["include"].append(content_to_add_parsed["include"][0])
                # If it's a dictionary (unexpected), skip adding
                else:
                    pass
            else:
                # Add the new "include" block if it doesn't exist
                existing_content["include"] = content_to_add_parsed["include"]

            # Convert the updated content back to YAML with original indentation
            updated_content = yaml.dump(existing_content, Dumper=CustomDumper, default_flow_style=False, sort_keys=False, indent=2)

            # Write updated content back to the .gitlab-ci.yml file
            with open(gitlab_ci_file, 'w') as file:
                file.write(updated_content)
                print(f"Updated .gitlab-ci.yml in project {project_dir}")
        else:
            print(f".gitlab-ci.yml not found in project {project_dir}")
    except Exception as e:
        print(f"Error processing {project_dir}: {e}")
