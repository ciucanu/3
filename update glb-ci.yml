import os
import yaml
from collections import OrderedDict

# Project directory path
projects_dir = "/path/to/projects"

# Content to add
content_to_add = """
- include:
    project: zzz
    file: zzz

  variables:
    nexus_iq_scan_path: .
    nexus_scan_stage: release

  stages:
  - nexusiq-scan
"""

# Blocks to update
blocks_to_update = ['variables', 'stages', 'include']

# Loop through project directories
for project_dir in os.listdir(projects_dir):
  project_path = os.path.join(projects_dir, project_dir)
  gitlab_ci_file = os.path.join(project_path, ".gitlab-ci.yml")

  # Check if .gitlab-ci.yml exists
  if os.path.isfile(gitlab_ci_file):
    try:
      # Read and split lines
      with open(gitlab_ci_file, 'r') as file:
        lines = file.read().splitlines()

      # Content and block tracking variables
      ci_content = OrderedDict()
      block_found = {block: False for block in blocks_to_update}
      block_line_numbers = {block: -1 for block in blocks_to_update}

      # Iterate through lines
      for idx, line in enumerate(lines):
        for block in blocks_to_update:
          if block + ':' in line:
            block_found[block] = True
            block_line_numbers[block] = idx

      # Add missing blocks at the end
      for block, found in block_found.items():
        if not found:
          ci_content[max(ci_content.keys()) + 1] = content_to_add.strip()

      # Write updated content
      with open(gitlab_ci_file, 'w') as file:
        for line_number in sorted(ci_content.keys()):
          file.write(ci_content[line_number] + '\n')
      print(f"Updated .gitlab-ci.yml in project {project_dir}")
    except Exception:  # General exception handling
      print(f"Error processing .gitlab-ci.yml in project {project_dir}")

  else:
    print(f".gitlab-ci.yml not found in project {project_dir}")
