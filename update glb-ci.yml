import os
import yaml
from collections import OrderedDict

# Directory where your projects are located
projects_directory = "/path/to/projects"

# Content to add inside existing blocks
content_to_add = """
include:
  - project: zzz
    file: zzz

variables:
  nexus_iq_scan_path: .
  nexus_scan_stage: release

stages: 
  - nexusiq-scan
"""

# Define the blocks to update
blocks_to_update = ['variables', 'stages', 'include']

# Iterate through each project directory
for project_dir in os.listdir(projects_directory):
    project_path = os.path.join(projects_directory, project_dir)
    gitlab_ci_file = os.path.join(project_path, ".gitlab-ci.yml")

    # Check if .gitlab-ci.yml exists in the project directory
    if os.path.isfile(gitlab_ci_file):
        with open(gitlab_ci_file, 'r+') as file:
            try:
                ci_content = yaml.safe_load(file)
            except yaml.YAMLError as exc:
                print(f"Error reading YAML file in project {project_dir}: {exc}")
                continue
            
            # Update each block
            for block in blocks_to_update:
                if block in ci_content:
                    new_block_content = yaml.safe_load(content_to_add)[block]
                    # Check if the content already exists before appending
                    for key, value in new_block_content.items():
                        if key not in ci_content[block]:
                            ci_content[block][key] = value
                else:
                    ci_content[block] = yaml.safe_load(content_to_add)[block]

            # Reset file pointer to beginning and truncate the file
            file.seek(0)
            file.truncate()

            # Write updated content back to the .gitlab-ci.yml file
            yaml.dump(ci_content, file, default_flow_style=False)
            print(f"Updated .gitlab-ci.yml in project {project_dir}")
    else:
        print(f".gitlab-ci.yml not found in project {project_dir}")
