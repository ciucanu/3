#!/usr/bin/env python3

import os

# Path to the folder containing gitlab repositories
base_path = '/app/cloudera/tmp/gitlab2/'

# Content to be appended/updated
include_content = "  - project: 'zzz'\n    file: 'zzz'\n"
variables_content = "  nexus_iq_scan_path: .\n  nexus_scan_stage: release\n"
stages_content = "  - nexusiq-scan\n"

def update_yaml(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()

    include_found = False
    variables_found = False
    stages_found = False

    include_updated = False
    variables_updated = False
    stages_updated = False

    updated_lines = []
    in_block = None

    for line in lines:
        stripped_line = line.strip()

        if stripped_line.startswith("include:"):
            include_found = True
            in_block = 'include'
            updated_lines.append(line)
            continue
        elif stripped_line.startswith("variables:"):
            variables_found = True
            in_block = 'variables'
            updated_lines.append(line)
            continue
        elif stripped_line.startswith("stages:"):
            stages_found = True
            in_block = 'stages'
            updated_lines.append(line)
            continue

        if in_block == 'include' and not stripped_line.startswith("- project:"):
            if not include_updated:
                updated_lines.append(include_content)
                include_updated = True
            in_block = None

        if in_block == 'variables' and not stripped_line.startswith("nexus_iq_scan_path") and not stripped_line.startswith("nexus_scan_stage"):
            if not variables_updated:
                updated_lines.append(variables_content)
                variables_updated = True
            in_block = None

        if in_block == 'stages' and not stripped_line.startswith("- nexusiq-scan"):
            if not stages_updated:
                updated_lines.append(stages_content)
                stages_updated = True
            in_block = None

        updated_lines.append(line)

    if not include_found:
        updated_lines.append("include:\n" + include_content)
    elif not include_updated:
        updated_lines.append(include_content)

    if not variables_found:
        updated_lines.append("variables:\n" + variables_content)
    elif not variables_updated:
        updated_lines.append(variables_content)

    if not stages_found:
        updated_lines.append("stages:\n" + stages_content)
    elif not stages_updated:
        updated_lines.append(stages_content)

    with open(file_path, 'w') as file:
        file.writelines(updated_lines)

def scan_and_update(path):
    for root, dirs, files in os.walk(path):
        for file in files:
            if file == '.gitlab-ci.yml':
                file_path = os.path.join(root, file)
                print(f"Processing: {file_path}")
                update_yaml(file_path)

if __name__ == "__main__":
    scan_and_update(base_path)
